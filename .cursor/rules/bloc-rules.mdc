---
globs: *.dart
description: Comprehensive Bloc pattern rules for state management
---

# Bloc Rules

## Naming Conventions

### Event Naming
1. Name events in the past tense, as they represent actions that have already occurred from the bloc's perspective.
2. Use the format: BlocSubject + optional noun + verb (event). Example: LoginButtonPressed, UserProfileLoaded
3. For initial load events, use: BlocSubjectStarted. Example: AuthenticationStarted
4. The base event class should be named: BlocSubjectEvent.

### State Naming
5. Name states as nouns, since a state is a snapshot at a particular point in time.
6. When using subclasses for states, use the format: BlocSubject + Initial | Success | Failure | InProgress. Example: LoginInitial, LoginSuccess, LoginFailure, LoginInProgress
7. For single-class states, use: BlocSubjectState with a BlocSubjectStatus enum (initial, success, failure, loading). Example: LoginState with LoginStatus.initial
8. The base state class should always be named: BlocSubjectState.

## Modeling State

### State Class Structure
9. Extend Equatable for all state classes to enable value equality.
10. Annotate state classes with @immutable to enforce immutability.
11. Implement a copyWith method in state classes for easy state updates.
12. Use const constructors for state classes when possible.

### State Design Patterns
13. Use a single concrete class with a status enum for simple, non-exclusive states or when many properties are shared.
14. In the single-class approach, make properties nullable and handle them based on the current status.
15. Use a sealed class with subclasses for well-defined, exclusive states.
16. Store shared properties in the sealed base class; keep state-specific properties in subclasses.
17. Use exhaustive switch statements to handle all possible state subclasses.
18. Prefer the sealed class approach for type safety and exhaustiveness; prefer the single-class approach for conciseness and flexibility.

### State Equality and Updates
19. Always pass all relevant properties to the props getter when using Equatable in state classes.
20. When using Equatable, copy List or Map properties with List.of or Map.of to ensure value equality.
21. To retain previous data after an error, use a single state class with nullable data and error fields.
22. Emit a new instance of the state each time you want the UI to update; do not reuse the same instance.

## Bloc Concepts

### Cubit vs Bloc
23. Use Cubit for simple state management without events; use Bloc for more complex, event-driven state management.
24. Define the initial state by passing it to the superclass in both Cubit and Bloc.
25. Only use the emit method inside a Cubit or Bloc; do not call it externally.
26. UI components should listen to state changes and update only in response to new states.
27. Duplicate states (state == nextState) are ignored; no state change will occur.

### Observation and Error Handling
28. Override onChange in Cubit or Bloc to observe all state changes.
29. Use a custom BlocObserver to observe all state changes and errors globally.
30. Override onError in both Cubit/Bloc and BlocObserver for error handling.

### Event Handling
31. Add events to a Bloc in response to user actions or lifecycle events.
32. Use onTransition in Bloc to observe the full transition (event, current state, next state).
33. Use event transformers (e.g., debounce, throttle) in Bloc for advanced event processing.

### Selection Guidelines
34. Prefer Cubit for simplicity and less boilerplate; prefer Bloc for traceability and advanced event handling.
35. If unsure, start with Cubit and refactor to Bloc if needed as requirements grow.
36. Initialize BlocObserver in main.dart for debugging and logging.

### API Design
37. Always keep business logic out of UI widgets; only interact with cubits/blocs via events or public methods.
38. Internal events in a bloc should be private and only used for real-time updates from repositories.
39. Use custom event transformers for internal events if needed.
40. When exposing public methods on a cubit, only use them to trigger state changes and return void or Future<void>.
41. For blocs, avoid exposing custom public methods; trigger state changes by adding events via the add method.
42. When using BlocProvider.of(context), call it within a child BuildContext, not the same context where the bloc was provided.

## Architecture Integration

### Layer Separation
43. Separate your features into three layers: Presentation, Business Logic, and Data.
44. The Data Layer is responsible for retrieving and manipulating data from sources such as databases or network requests.
45. Structure the Data Layer into repositories (wrappers around data providers) and data providers (perform CRUD operations).
46. The Business Logic Layer responds to input from the presentation layer and communicates with repositories to build new states.
47. The Presentation Layer renders UI based on bloc states and handles user input and lifecycle events.

### Dependency Management
48. Inject repositories into blocs via constructors; blocs should not directly access data providers.
49. Avoid direct bloc-to-bloc communication to prevent tight coupling.
50. To coordinate between blocs, use BlocListener in the presentation layer to listen to one bloc and add events to another.
51. For shared data, inject the same repository into multiple blocs; let each bloc listen to repository streams independently.
52. Always strive for loose coupling between architectural layers and components.
53. Structure your project consistently and intentionally; there is no single right way.

## Flutter Bloc Concepts

### Widget Integration
54. Use BlocBuilder to rebuild widgets in response to bloc or cubit state changes; the builder function must be pure.
55. Use BlocListener to perform side effects (e.g., navigation, dialogs) in response to state changes.
56. Use BlocConsumer when you need both BlocBuilder and BlocListener functionality in a single widget.

### Provider Integration
57. Use BlocProvider to provide blocs to widget subtrees via dependency injection.
58. Use MultiBlocProvider to provide multiple blocs and avoid deeply nested providers.
59. Use BlocSelector to rebuild widgets only when a selected part of the state changes.
60. Use MultiBlocListener to listen for state changes and trigger side effects; avoid nesting listeners by using MultiBlocListener.
61. Use RepositoryProvider to provide repositories or services to the widget tree.
62. Use MultiRepositoryProvider to provide multiple repositories and avoid nesting.

### Context Usage
63. Use context.read<T>() to access a bloc or repository without listening for changes (e.g., in callbacks).
64. Use context.watch<T>() inside the build method to listen for changes and trigger rebuilds.
65. Use context.select<T, R>() to listen for changes in a specific part of a bloc's state.
66. Avoid using context.watch or context.select at the root of the build method to prevent unnecessary rebuilds.
67. Prefer BlocBuilder and BlocSelector over context.watch and context.select for explicit rebuild scoping.
68. Scope rebuilds using Builder when using context.watch or context.select for multiple blocs.

### State Handling
69. Handle all possible cubit/bloc states explicitly in the UI (e.g., empty, loading, error, populated).

## Code Quality & Linting

### Static Analysis
70. Use the bloc_lint package to enforce Bloc best practices and catch common mistakes.
71. Use bloc_tools command-line utilities for project scaffolding and development workflow.
72. Configure bloc_lint in your analysis_options.yaml with recommended rules for static analysis.

### Anti-Patterns
73. Avoid importing Flutter dependencies in your business logic components (blocs, cubits, repositories).
74. Avoid exposing public fields on Bloc and Cubit instances; all state should be accessed through the state getter.
75. Avoid exposing public methods on Bloc instances; use the add method to communicate with blocs via events.

### Command Line Tools
76. Use bloc lint command from bloc_tools to run linting from the command line.
77. Install bloc_tools globally for command-line access: dart pub global activate bloc_tools.
78. Use the recommended analysis_options.yaml configuration with all recommended bloc linting rules enabled.
79. Available lint rules include: avoid_flutter_imports, avoid_public_fields, avoid_public_bloc_methods, prefer_bloc, prefer_cubit, and prefer_void_public_cubit_methods.

## Developer Tools & Integrations

### Code Generation
80. Create custom templates using Mason bricks for consistent code generation across projects.
81. Use the official Bloc developer tools for debugging and state inspection.

## Testing

### Test Organization
82. Add the test and bloc_test packages to your dev dependencies for bloc testing.
83. Organize tests into groups to share setup and teardown logic.
84. Create a dedicated test file (e.g., counter_bloc_test.dart) for each bloc.
85. Import the test and bloc_test packages in your test files.

### Test Setup
86. Use setUp to initialize bloc instances before each test and tearDown to clean up after tests.
87. Test the bloc's initial state before testing transitions.
88. Use the blocTest function to test bloc state transitions in response to events.
89. Assert the expected sequence of emitted states for each bloc event.

### Test Best Practices
90. Keep tests concise, focused, and easy to maintain to ensure confidence in refactoring.
91. Mock cubits/blocs in widget tests to verify UI behavior for all possible states.
92. Consider using bloc_lint in your CI/CD pipeline to enforce code quality standards.

## Ecosystem & Packages

### Package Selection
93. The Bloc ecosystem consists of multiple packages: bloc (core), flutter_bloc (Flutter widgets), bloc_test (testing), bloc_lint (linting), bloc_tools (CLI), bloc_concurrency (event transformers), hydrated_bloc (persistence), replay_bloc (undo/redo), and angular_bloc (AngularDart).
94. Use bloc_concurrency package for advanced event transformers like sequential, concurrent, droppable, and restartable.
95. Use hydrated_bloc for automatic state persistence and restoration across app sessions.
96. Use replay_bloc to add undo and redo functionality to your blocs.
97. Install packages based on your needs: start with bloc and flutter_bloc for basic functionality.